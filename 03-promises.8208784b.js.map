{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBASjC,SAASI,EAAiBC,IACpBR,EAAKM,OAAOG,MAAQ,GAAKT,EAAKI,MAAMK,MAAQ,GAAKT,EAAKK,KAAKI,MAAQ,IACrEC,EAAAZ,GAASa,OAAOC,QAAQ,wC,CAR5BZ,EAAKC,KAAKY,iBAAiB,UAY3B,SAA0BL,G,kBAUtB,IAAMM,EAAOC,EAAYX,MAASW,EAAYV,MAAQW,EAAI,GAE1DC,YAAW,WACT,IAAIC,SAAQ,WACVC,QAAQC,IAAI,KAAeC,OAAVL,EAAE,UAAaK,OAALP,EAAK,aAChCJ,EAAAZ,GAASa,OAAOW,QAAQ,WAA6BD,OAAlBL,EAAE,kBAAqBK,OAALP,EAAK,M,MAE3DA,E,EAhBLN,EAAEe,iBAQF,IANA,IAAMR,EAAc,CAClBX,MAAOoB,OAAOxB,EAAKI,MAAMK,OACzBJ,KAAMmB,OAAOxB,EAAKK,KAAKI,OACvBH,OAAQkB,OAAOxB,EAAKM,OAAOG,QAGpBgB,EAAI,EAAGA,GAAKV,EAAYT,OAAQmB,GAAK,EAACC,EAAAD,E,IApBjDzB,EAAKI,MAAMS,iBAAiB,QAASN,GACrCP,EAAKK,KAAKQ,iBAAiB,QAASN,GACpCP,EAAKM,OAAOO,iBAAiB,QAASN,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.5.min.css\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onCreatePromises);\nrefs.delay.addEventListener('input', onPositiveNumber);\nrefs.step.addEventListener('input', onPositiveNumber);\nrefs.amount.addEventListener('input', onPositiveNumber);\n\n\nfunction onPositiveNumber(e) {\n  if (refs.amount.value < 0 || refs.delay.value < 0 || refs.step.value < 0) {\n    Notiflix.Notify.failure('Please, enter a number greater than 0');\n  };\n};\n\nfunction onCreatePromises(e) {\n  e.preventDefault();\n\n  const formPromise = {\n    delay: Number(refs.delay.value),\n    step: Number(refs.step.value),\n    amount: Number(refs.amount.value),\n  };\n  // console.log('delay ->', formPromise.delay, 'step ->', formPromise.step, 'amount ->', formPromise.amount);\n  for (let i = 1; i <= formPromise.amount; i += 1) {\n    const time = formPromise.delay + (formPromise.step * (i - 1));\n    // console.log(time)\n    setTimeout(() => {\n      new Promise(() => {\n        console.log(`# ${i} time ${time} created`);\n        Notiflix.Notify.success(`Promise ${i} completed in ${time}ms`)\n      });\n    }, time);\n  };\n}  \n  \n\n\n// *****Лекция Репеты********\n// // *************************\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > .5;\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)')\n//     }\n//     reject('промис выполнился с ошибкой (отклонен, rejected)');\n//   }, 2000);\n// });\n\n// // результат промиса\n// // promise.then(onFulfilled, onRejected);\n// function onFulfilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   console.log(`УРА! Получилось ${result}`);\n// };\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   console.log(`Выполнился с ошибкой. Такое. ${error}`);\n// };\n\n// // Цепочки промисов (chaining)\n// console.log(promise);\n// promise\n//   .then(onFulfilled)\n//   .then(\n//     x => {\n//       console.log(x);\n//       throw new Error('ошибка непонятно где, но написала во втором')\n//     return 5;\n//     })\n//   .then(\n//     y => {\n//     console.log(y);\n//     })\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('Я буду выполнен в любом случае'));\n// //******************************* */\n\n\n// // Промисификация функций\n// const makeOrder = (dish) => {\n//   const DELAY = 1000;\n  \n//   return promise = new Promise((resolve, reject) => {\n//     const passed = Math.random() > .5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve(`вот ваше блюдо: ${dish}`);\n//       } else {\n//         reject('Сорри, закончились продукты');\n//       }\n//     }, DELAY);\n//   });\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// };\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n// *************************************\n// // Промисификация синхронных функций\n\n// const makeOrder = dish => {\n//   return Promise.resolve(`вот ваше блюдо: ${dish}`);\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// };\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n// *****************************************\n\n// discription function fetch Возвращает значения промиса\n// function fetch(url) {\n//   return new Promise(...)\n// }\n\n// // Покемоны с https://pokeapi.co/\n\n// const fetchPokemonById = id => {\n//   return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n//     .then(r => r.json());\n// };\n\n// fetchPokemonById(1).then(onFetchSuccess).catch(onFetchError);\n// fetchPokemonById(111).then(onFetchSuccess).catch(onFetchError);\n// // fetchPokemonById(2);\n// // fetchPokemonById(3);\n\n\n// function onFetchSuccess(pokemon) {\n//   console.log('onFetchSuccess -> onFetchSuccess')\n//   console.log(pokemon);\n// }\n// function onFetchError(error) {\n//   console.log('onFetchError -> onFetchError');\n//   console.log(error);\n// }\n\n// **********************************************\n\n// //  example\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > .5;\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('Hi!');\n//       }\n//       reject('все пропало');\n//     }, 2000);\n    \n    \n//   });\n// }\n\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\n// ************************************\n\n// // Ипподром\n\n// const horses = [\n//   'Secretar',\n//   'Eclipse',\n//   'Fire',\n//   'Chuk',\n//   'Ikar',\n// ];\n\n// let raceCounter = 0;\n// const refs = {\n//   startBtn: document.querySelector('.js-race-btn'), \n//   winnerField: document.querySelector('.js-winner'),\n//   progressField: document.querySelector('.js-progress'),\n//   tableBody: document.querySelector('.js-results-table > tbody'),\n// }\n\n// refs.startBtn.addEventListener('click', onStart);\n\n// function onStart() {\n//   const promises = horses.map(run);\n//   raceCounter += 1;\n//   // refs.winnerField.textContent = '';\n//   updateWinnerField('');\n//   // refs.progressField.textContent = 'Заезд начался, ставки не принимаются';\n//   updateProgressField('Заезд начался, ставки не принимаются');\n//   // console.log(\n//   //   '%c Заезд начался, ставки не принимаются',\n//   //   'color: broun; font-size: 14px;',\n//   // );\n//   determineWinner(promises);\n//   waitForAll(promises);\n//  };\n\n// function determineWinner(horsesP) {\n// // Promise.race([]) для создания первого выполнившегося промиса\n//   Promise.race(horsesP).then(({ horse, time }) => {\n//     updateWinnerField(`Победил ${horse}, финишировав за ${time} времени`);\n//     // console.log(\n//     //   `%c Победил ${horse}, финишировав за ${time} времени`,\n//     //   'color: green; font-size: 14px;',\n//     // );\n//     updateResultsTable({ horse, time, raceCounter});\n//   });\n// };\n \n// function waitForAll(horsesP) {\n//     // Promise.all([]) для ожидания всех промисов\n//   Promise.all(horsesP).then(() => {\n//     // refs.progressField.textContent = `Заезд окончен, принимаются ставки`;\n//     updateProgressField(`Заезд окончен, принимаются ставки`);\n//     // console.log(\n//     //   '%c Заезд окончен, принимаются ставки',\n//     //   'color: blue; font-size: 14px;',\n//     // );\n//   });\n//  };\n\n// function updateWinnerField(message) {\n//   refs.winnerField.textContent = message;\n// };\n// function updateProgressField(message) {\n//   refs.progressField.textContent = message;\n// };\n\n// function updateResultsTable({ horse, time, raceCounter }) {\n//   const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n//   refs.tableBody.insertAdjacentHTML('beforeend', tr);\n\n// };\n\n// function run(horse) {\n//   return new Promise((resolve) => {\n//     const time = getRandomTime(2000, 3500);\n\n//     setTimeout(() => {\n//       resolve({horse, time})\n//     }, time)\n//   })\n// };\n\n// function getRandomTime(min, max) {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$onPositiveNumber","e","value","$parcel$interopDefault","Notify","failure","addEventListener","time","formPromise","i","setTimeout","Promise","console","log","concat","success","preventDefault","Number","i1","_loop"],"version":3,"file":"03-promises.8208784b.js.map"}